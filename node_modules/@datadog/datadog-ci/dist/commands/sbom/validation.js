"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateFileAgainstToolRequirements = exports.validateSbomFileAgainstSchema = exports.getValidator = void 0;
const fs_1 = __importDefault(require("fs"));
const ajv_1 = __importDefault(require("ajv"));
const ajv_formats_1 = __importDefault(require("ajv-formats"));
const bom_1_4_schema_json_1 = __importDefault(require("./json-schema/cyclonedx/bom-1.4.schema.json"));
const bom_1_5_schema_json_1 = __importDefault(require("./json-schema/cyclonedx/bom-1.5.schema.json"));
const jsf_0_82_schema_json_1 = __importDefault(require("./json-schema/jsf/jsf-0.82.schema.json"));
const spdx_schema_json_1 = __importDefault(require("./json-schema/spdx/spdx.schema.json"));
/**
 * Get the validate function. Read all the schemas and return
 * the function used to validate all SBOM documents.
 */
const getValidator = () => {
    const ajv = new ajv_1.default({ strict: false, validateFormats: false });
    ajv.addMetaSchema(spdx_schema_json_1.default);
    ajv.addMetaSchema(jsf_0_82_schema_json_1.default);
    (0, ajv_formats_1.default)(ajv);
    return ajv;
};
exports.getValidator = getValidator;
/**
 * Validate an SBOM file against the SBOM CycloneDX schema.
 *
 * @param path - the path of the file to validate
 * @param ajv - an instance of Ajv fully initialized and ready to use.
 * @param debug - if we need to show debug information
 */
const validateSbomFileAgainstSchema = (path, ajv, debug) => {
    try {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        const fileContent = JSON.parse(fs_1.default.readFileSync(path).toString('utf8'));
        const validateFunctionCycloneDx15 = ajv.compile(bom_1_5_schema_json_1.default);
        const validateFunctionCycloneDx14 = ajv.compile(bom_1_4_schema_json_1.default);
        const isValid15 = validateFunctionCycloneDx15(fileContent);
        const isValid14 = validateFunctionCycloneDx14(fileContent);
        // if debug is set, we should show what version is valid, either CycloneDX 1.4 or 1.5
        if (isValid15 && debug) {
            process.stdout.write('File is a valid CycloneDX 1.5 file\n');
        }
        if (isValid14 && debug) {
            process.stdout.write('File is a valid CycloneDX 1.4 file\n');
        }
        if (isValid14 || isValid15) {
            return true;
        }
        // show the errors
        if (!isValid15) {
            const errors15 = validateFunctionCycloneDx15.errors || [];
            if (debug) {
                errors15.forEach((message) => {
                    process.stderr.write(`Error while validating file against CycloneDX 1.5: ${path}, ${message.schemaPath}: ${message.instancePath} ${message.message}\n`);
                });
            }
        }
        if (!isValid14) {
            const errors14 = validateFunctionCycloneDx14.errors || [];
            if (debug) {
                errors14.forEach((message) => {
                    process.stderr.write(`Error while validating file against CycloneDX 1.4: ${path}, ${message.schemaPath}: ${message.instancePath} ${message.message}\n`);
                });
            }
        }
        return false;
    }
    catch (error) {
        if (debug) {
            process.stderr.write(`Error while reading file: ${error.message}\n`);
        }
        return false;
    }
};
exports.validateSbomFileAgainstSchema = validateSbomFileAgainstSchema;
/**
 * Validate an SBOM file again what we need.
 * @param path - the path of the file to validate
 * @param debug - if we need to show debug information
 */
const validateFileAgainstToolRequirements = (path, debug) => {
    try {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        const fileContent = JSON.parse(fs_1.default.readFileSync(path).toString('utf8'));
        if (!fileContent) {
            return false;
        }
        const components = fileContent['components'];
        for (const component of components) {
            if (!component['type']) {
                return false;
            }
            if (component['type'] === 'library') {
                const name = component['name'];
                if (!!component['version']) {
                    continue;
                }
                if (!component['purl']) {
                    if (debug) {
                        process.stderr.write(`Component ${name} has no purl\n`);
                    }
                    return false;
                }
            }
        }
    }
    catch (error) {
        if (debug) {
            process.stderr.write(`Error while reading file: ${error.message}\n`);
        }
        return false;
    }
    return true;
};
exports.validateFileAgainstToolRequirements = validateFileAgainstToolRequirements;
//# sourceMappingURL=validation.js.map